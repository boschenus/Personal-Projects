"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var assert = __importStar(require("assert"));
var httpMocks = __importStar(require("node-mocks-http"));
var routes_1 = require("./routes");
describe('routes', function () {
    // TODO: remove the tests for the dummy route
    it('dummy', function () {
        var req1 = httpMocks.createRequest({ method: 'GET', url: '/api/dummy', query: { name: 'Bob' } });
        var res1 = httpMocks.createResponse();
        (0, routes_1.dummy)(req1, res1);
        assert.strictEqual(res1._getStatusCode(), 200);
        assert.deepStrictEqual(res1._getData(), { msg: "Hi, Bob!" });
    });
    it('addPoll', function () {
        var req_test0 = httpMocks.createRequest({ method: 'POST', url: '/api/add', body: { name: "test0", minutes: 5, options: ['a', 'b', 'c'] } });
        var res_test0 = httpMocks.createResponse();
        (0, routes_1.addPoll)(req_test0, res_test0);
        var req1 = httpMocks.createRequest({ method: 'POST', url: '/api/add', body: { name: 1 } });
        var res1 = httpMocks.createResponse();
        (0, routes_1.addPoll)(req1, res1);
        assert.strictEqual(res1._getStatusCode(), 400);
        assert.deepStrictEqual(res1._getData(), "missing or invalid 'name' parameter");
        var req2 = httpMocks.createRequest({ method: 'POST', url: '/api/add', body: { name: "a", minutes: '4' } });
        var res2 = httpMocks.createResponse();
        (0, routes_1.addPoll)(req2, res2);
        assert.strictEqual(res2._getStatusCode(), 400);
        assert.deepStrictEqual(res2._getData(), "'minutes' is not a number: ".concat(req2.body.minutes));
        var req3 = httpMocks.createRequest({ method: 'POST', url: '/api/add', body: { name: "a", minutes: 0.5 } });
        var res3 = httpMocks.createResponse();
        (0, routes_1.addPoll)(req3, res3);
        assert.strictEqual(res3._getStatusCode(), 400);
        assert.deepStrictEqual(res3._getData(), "'minutes' is not a positive integer: ".concat(0.5));
        var req4 = httpMocks.createRequest({ method: 'POST', url: '/api/add', body: { name: "a", minutes: 2, options: 4 } });
        var res4 = httpMocks.createResponse();
        (0, routes_1.addPoll)(req4, res4);
        assert.strictEqual(res4._getStatusCode(), 400);
        assert.deepStrictEqual(res4._getData(), "missing or invalid 'options' parameter");
        var req5 = httpMocks.createRequest({ method: 'POST', url: '/api/add', body: { name: "a", minutes: 2, options: [1] } });
        var res5 = httpMocks.createResponse();
        (0, routes_1.addPoll)(req5, res5);
        assert.strictEqual(res5._getStatusCode(), 400);
        assert.deepStrictEqual(res5._getData(), "missing or invalid 'options' parameter");
        var req6 = httpMocks.createRequest({ method: 'POST', url: '/api/add', body: { name: "test0", minutes: 2, options: ['a', 'b'] } });
        var res6 = httpMocks.createResponse();
        (0, routes_1.addPoll)(req6, res6);
        assert.strictEqual(res6._getStatusCode(), 400);
        assert.deepStrictEqual(res6._getData(), "poll for '".concat(req6.body.name, "' already exists"));
        var req7 = httpMocks.createRequest({ method: 'POST', url: '/api/add', body: { name: "test1", minutes: 2, options: ['a', 'b'] } });
        var res7 = httpMocks.createResponse();
        (0, routes_1.addPoll)(req7, res7);
        assert.strictEqual(res7._getStatusCode(), 200);
        assert.deepStrictEqual(res7._getData().poll.name, "test1");
        assert.deepStrictEqual(res7._getData().poll.votes, []);
        assert.deepStrictEqual(res7._getData().poll.options, ['a', 'b']);
        assert.deepStrictEqual(res7._getData().poll.results, []);
        var endTime7 = res7._getData().poll.endTime;
        assert.ok(Math.abs(endTime7 - Date.now() - 2 * 60 * 1000) < 50);
        var req8 = httpMocks.createRequest({ method: 'POST', url: '/api/add', body: { name: "test2", minutes: 4, options: ['a', 'b', 'c'] } });
        var res8 = httpMocks.createResponse();
        (0, routes_1.addPoll)(req8, res8);
        assert.strictEqual(res8._getStatusCode(), 200);
        assert.deepStrictEqual(res8._getData().poll.name, "test2");
        assert.deepStrictEqual(res8._getData().poll.votes, []);
        assert.deepStrictEqual(res8._getData().poll.options, ['a', 'b', 'c']);
        assert.deepStrictEqual(res8._getData().poll.results, []);
        var endTime8 = res8._getData().poll.endTime;
        assert.ok(Math.abs(endTime8 - Date.now() - 4 * 60 * 1000) < 50);
        var req9 = httpMocks.createRequest({ method: 'POST', url: '/api/add', body: { name: "a", minutes: 0 } });
        var res9 = httpMocks.createResponse();
        (0, routes_1.addPoll)(req9, res9);
        assert.strictEqual(res9._getStatusCode(), 400);
        assert.deepStrictEqual(res9._getData(), "'minutes' is not a positive integer: ".concat(0));
        (0, routes_1.resetForTesting)();
    });
    it('getPoll', function () {
        var req_test0 = httpMocks.createRequest({ method: 'POST', url: '/api/add', body: { name: "test0", minutes: 5, options: ['a', 'b', 'c'] } });
        var res_test0 = httpMocks.createResponse();
        (0, routes_1.addPoll)(req_test0, res_test0);
        var req_test1 = httpMocks.createRequest({ method: 'POST', url: '/api/add', body: { name: "test1", minutes: 2, options: ['a', 'b'] } });
        var res_test1 = httpMocks.createResponse();
        (0, routes_1.addPoll)(req_test1, res_test1);
        //Error for name is not string
        var req1 = httpMocks.createRequest({ method: 'POST', url: '/api/get', body: {} });
        var res1 = httpMocks.createResponse();
        (0, routes_1.getPoll)(req1, res1);
        assert.strictEqual(res1._getStatusCode(), 400);
        assert.deepStrictEqual(res1._getData(), "missing or invalid 'name' parameter");
        var req2 = httpMocks.createRequest({ method: 'POST', url: '/api/get', body: { name: "a" } });
        var res2 = httpMocks.createResponse();
        (0, routes_1.getPoll)(req2, res2);
        assert.strictEqual(res2._getStatusCode(), 400);
        assert.deepStrictEqual(res2._getData(), "no poll with name '".concat("a", "'"));
        var req3 = httpMocks.createRequest({ method: 'POST', url: '/api/get', body: { name: "test0" } });
        var res3 = httpMocks.createResponse();
        (0, routes_1.getPoll)(req3, res3);
        assert.strictEqual(res3._getStatusCode(), 200);
        assert.deepStrictEqual(res3._getData().poll.name, "test0");
        assert.deepStrictEqual(res3._getData().poll.votes, []);
        assert.deepStrictEqual(res3._getData().poll.options, ['a', 'b', 'c']);
        assert.deepStrictEqual(res3._getData().poll.results, []);
        var endTime3 = res3._getData().poll.endTime;
        assert.ok(Math.abs(endTime3 - Date.now() - 5 * 60 * 1000) < 50);
        var req4 = httpMocks.createRequest({ method: 'POST', url: '/api/get', body: { name: "test1" } });
        var res4 = httpMocks.createResponse();
        (0, routes_1.getPoll)(req4, res4);
        assert.strictEqual(res4._getStatusCode(), 200);
        assert.deepStrictEqual(res4._getData().poll.name, "test1");
        assert.deepStrictEqual(res4._getData().poll.votes, []);
        assert.deepStrictEqual(res4._getData().poll.options, ['a', 'b']);
        assert.deepStrictEqual(res4._getData().poll.results, []);
        var endTime4 = res4._getData().poll.endTime;
        assert.ok(Math.abs(endTime4 - Date.now() - 2 * 60 * 1000) < 50);
        (0, routes_1.resetForTesting)();
    });
    it('votePoll', function () {
        var req_test0 = httpMocks.createRequest({ method: 'POST', url: '/api/add', body: { name: "test0", minutes: 5, options: ['a', 'b', 'c'] } });
        var res_test0 = httpMocks.createResponse();
        (0, routes_1.addPoll)(req_test0, res_test0);
        var req_test1 = httpMocks.createRequest({ method: 'POST', url: '/api/add', body: { name: "test1", minutes: 2, options: ['a', 'b'] } });
        var res_test1 = httpMocks.createResponse();
        (0, routes_1.addPoll)(req_test1, res_test1);
        //Error for name is not string
        var req1 = httpMocks.createRequest({ method: 'POST', url: '/api/vote', body: {} });
        var res1 = httpMocks.createResponse();
        (0, routes_1.votePoll)(req1, res1);
        assert.strictEqual(res1._getStatusCode(), 400);
        assert.deepStrictEqual(res1._getData(), "missing or invalid 'name' parameter");
        var req2 = httpMocks.createRequest({ method: 'POST', url: '/api/vote', body: { name: "test0" } });
        var res2 = httpMocks.createResponse();
        (0, routes_1.votePoll)(req2, res2);
        assert.strictEqual(res2._getStatusCode(), 400);
        assert.deepStrictEqual(res2._getData(), "missing or invalid 'option' parameter ");
        var req3 = httpMocks.createRequest({ method: 'POST', url: '/api/vote', body: { name: "test0", option: "a" } });
        var res3 = httpMocks.createResponse();
        (0, routes_1.votePoll)(req3, res3);
        assert.strictEqual(res3._getStatusCode(), 400);
        assert.deepStrictEqual(res3._getData(), "missing or invalid 'voter' parameter ");
        var req4 = httpMocks.createRequest({ method: 'POST', url: '/api/vote', body: { name: "test0", option: "a", voter: "person1" } });
        var res4 = httpMocks.createResponse();
        (0, routes_1.votePoll)(req4, res4);
        assert.strictEqual(res4._getStatusCode(), 200);
        assert.deepStrictEqual(res4._getData().poll.name, "test0");
        assert.deepStrictEqual(res4._getData().poll.votes, [{ voter: "person1", option: "a" }]);
        assert.deepStrictEqual(res4._getData().poll.options, ['a', 'b', 'c']);
        assert.deepStrictEqual(res4._getData().poll.results, ["".concat((1 * 10000) / 100.00 + '%', " -- ").concat('a'), "".concat((0 * 10000) / 100.00 + '%', " -- ").concat('b'), "".concat((0 * 10000) / 100.00 + '%', " -- ").concat('c')]);
        var endTime4 = res4._getData().poll.endTime;
        assert.ok(Math.abs(endTime4 - Date.now() - 5 * 60 * 1000) < 50);
        var req5 = httpMocks.createRequest({ method: 'POST', url: '/api/vote', body: { name: "test1", option: "a", voter: "person1" } });
        var res5 = httpMocks.createResponse();
        (0, routes_1.votePoll)(req5, res5);
        assert.strictEqual(res5._getStatusCode(), 200);
        assert.deepStrictEqual(res5._getData().poll.name, "test1");
        assert.deepStrictEqual(res5._getData().poll.votes, [{ voter: "person1", option: "a" }]);
        assert.deepStrictEqual(res5._getData().poll.options, ['a', 'b']);
        assert.deepStrictEqual(res5._getData().poll.results, ["".concat((1 * 10000) / 100.00 + '%', " -- ").concat('a'), "".concat((0 * 10000) / 100.00 + '%', " -- ").concat('b')]);
        var endTime5 = res5._getData().poll.endTime;
        assert.ok(Math.abs(endTime5 - Date.now() - 2 * 60 * 1000) < 50);
        var req6 = httpMocks.createRequest({ method: 'POST', url: '/api/vote', body: { name: "test3", option: "a", voter: "b" } });
        var res6 = httpMocks.createResponse();
        (0, routes_1.votePoll)(req6, res6);
        assert.strictEqual(res6._getStatusCode(), 400);
        assert.deepStrictEqual(res6._getData(), " Impossible! data was lost! ");
        (0, routes_1.advanceTimeForTesting)(5 * 60 * 1000 + 50);
        var req7 = httpMocks.createRequest({ method: 'POST', url: '/api/vote', body: { name: "test1", option: "a", voter: "b" } });
        var res7 = httpMocks.createResponse();
        (0, routes_1.votePoll)(req7, res7);
        assert.strictEqual(res7._getStatusCode(), 400);
        assert.deepStrictEqual(res7._getData(), " this poll is over! ");
        (0, routes_1.resetForTesting)();
    });
    it('listPolls', function () {
        var req1 = httpMocks.createRequest({ method: 'GET', url: '/api/list', query: {} });
        var res1 = httpMocks.createResponse();
        (0, routes_1.listPolls)(req1, res1);
        assert.strictEqual(res1._getStatusCode(), 200);
        assert.deepStrictEqual(res1._getData(), { openPolls: [], closedPolls: [] });
        var req2 = httpMocks.createRequest({ method: 'POST', url: '/api/add',
            body: { name: "test0", minutes: 10, options: ['a', 'b', 'c'] } });
        var res2 = httpMocks.createResponse();
        (0, routes_1.addPoll)(req2, res2);
        assert.strictEqual(res2._getStatusCode(), 200);
        assert.deepStrictEqual(res2._getData().poll.name, "test0");
        assert.deepStrictEqual(res2._getData().poll.options, ['a', 'b', 'c']);
        var req3 = httpMocks.createRequest({ method: 'POST', url: '/api/add',
            body: { name: "test1", minutes: 8, options: ['a', 'b'] } });
        var res3 = httpMocks.createResponse();
        (0, routes_1.addPoll)(req3, res3);
        assert.strictEqual(res3._getStatusCode(), 200);
        assert.deepStrictEqual(res3._getData().poll.name, "test1");
        assert.deepStrictEqual(res3._getData().poll.options, ['a', 'b']);
        var req4 = httpMocks.createRequest({ method: 'POST', url: '/api/add',
            body: { name: "test2", minutes: 4, options: ['b', 'c'] } });
        var res4 = httpMocks.createResponse();
        (0, routes_1.addPoll)(req4, res4);
        assert.strictEqual(res4._getStatusCode(), 200);
        assert.deepStrictEqual(res4._getData().poll.name, "test2");
        assert.deepStrictEqual(res4._getData().poll.options, ['b', 'c']);
        var req4_2 = httpMocks.createRequest({ method: 'POST', url: '/api/add',
            body: { name: "test3", minutes: 2, options: ['b', 'c'] } });
        var res4_2 = httpMocks.createResponse();
        (0, routes_1.addPoll)(req4_2, res4_2);
        assert.strictEqual(res4_2._getStatusCode(), 200);
        assert.deepStrictEqual(res4_2._getData().poll.name, "test3");
        assert.deepStrictEqual(res4_2._getData().poll.options, ['b', 'c']);
        // NOTE: test3 goes first because it finishes sooner
        var req5 = httpMocks.createRequest({ method: 'GET', url: '/api/list', query: {} });
        var res5 = httpMocks.createResponse();
        (0, routes_1.listPolls)(req5, res5);
        assert.strictEqual(res5._getStatusCode(), 200);
        assert.deepStrictEqual(res5._getData().openPolls.length, 4);
        assert.deepStrictEqual(res5._getData().closedPolls.length, 0);
        assert.deepStrictEqual(res5._getData().openPolls[0].name, "test3");
        assert.deepStrictEqual(res5._getData().openPolls[1].name, "test2");
        assert.deepStrictEqual(res5._getData().openPolls[2].name, "test1");
        assert.deepStrictEqual(res5._getData().openPolls[3].name, "test0");
        // Push time forward by over 5 minutes
        (0, routes_1.advanceTimeForTesting)(5 * 60 * 1000 + 50);
        var req6 = httpMocks.createRequest({ method: 'GET', url: '/api/list', query: {} });
        var res6 = httpMocks.createResponse();
        (0, routes_1.listPolls)(req6, res6);
        assert.strictEqual(res6._getStatusCode(), 200);
        assert.deepStrictEqual(res6._getData().openPolls.length, 2);
        assert.deepStrictEqual(res6._getData().closedPolls.length, 2);
        assert.deepStrictEqual(res6._getData().openPolls[0].name, "test1");
        assert.deepStrictEqual(res6._getData().openPolls[1].name, "test0");
        assert.deepStrictEqual(res6._getData().closedPolls[0].name, "test2");
        assert.deepStrictEqual(res6._getData().closedPolls[1].name, "test3");
        // Push time forward by another 5 minutes
        (0, routes_1.advanceTimeForTesting)(5 * 60 * 1000);
        // NOTE: all complete
        var req7 = httpMocks.createRequest({ method: 'GET', url: '/api/list', query: {} });
        var res7 = httpMocks.createResponse();
        (0, routes_1.listPolls)(req7, res7);
        assert.strictEqual(res7._getStatusCode(), 200);
        assert.deepStrictEqual(res7._getData().openPolls.length, 0);
        assert.deepStrictEqual(res7._getData().closedPolls.length, 4);
        assert.deepStrictEqual(res7._getData().closedPolls[0].name, "test0");
        assert.deepStrictEqual(res7._getData().closedPolls[1].name, "test1");
        assert.deepStrictEqual(res7._getData().closedPolls[2].name, "test2");
        assert.deepStrictEqual(res7._getData().closedPolls[3].name, "test3");
        (0, routes_1.resetForTesting)();
    });
    it('delete_poll', function () {
        var req1 = httpMocks.createRequest({ method: 'GET', url: '/api/list', query: {} });
        var res1 = httpMocks.createResponse();
        (0, routes_1.listPolls)(req1, res1);
        assert.strictEqual(res1._getStatusCode(), 200);
        assert.deepStrictEqual(res1._getData(), { openPolls: [], closedPolls: [] });
        var req2 = httpMocks.createRequest({ method: 'POST', url: '/api/add',
            body: { name: "test0", minutes: 10, options: ['a', 'b', 'c'] } });
        var res2 = httpMocks.createResponse();
        (0, routes_1.addPoll)(req2, res2);
        assert.strictEqual(res2._getStatusCode(), 200);
        assert.deepStrictEqual(res2._getData().poll.name, "test0");
        assert.deepStrictEqual(res2._getData().poll.options, ['a', 'b', 'c']);
        var req3 = httpMocks.createRequest({ method: 'POST', url: '/api/add',
            body: { name: "test1", minutes: 8, options: ['a', 'b'] } });
        var res3 = httpMocks.createResponse();
        (0, routes_1.addPoll)(req3, res3);
        assert.strictEqual(res3._getStatusCode(), 200);
        assert.deepStrictEqual(res3._getData().poll.name, "test1");
        assert.deepStrictEqual(res3._getData().poll.options, ['a', 'b']);
        var req4 = httpMocks.createRequest({ method: 'POST', url: '/api/add',
            body: { name: "test2", minutes: 4, options: ['b', 'c'] } });
        var res4 = httpMocks.createResponse();
        (0, routes_1.addPoll)(req4, res4);
        assert.strictEqual(res4._getStatusCode(), 200);
        assert.deepStrictEqual(res4._getData().poll.name, "test2");
        assert.deepStrictEqual(res4._getData().poll.options, ['b', 'c']);
        var req5 = httpMocks.createRequest({ method: 'POST', url: '/api/delete', body: { name: 1 } });
        var res5 = httpMocks.createResponse();
        (0, routes_1.delete_poll)(req5, res5);
        assert.strictEqual(res5._getStatusCode(), 400);
        assert.deepStrictEqual(res5._getData(), 'required argument "name" was missing or invaild');
        var req6 = httpMocks.createRequest({ method: 'POST', url: '/api/delete', body: {} });
        var res6 = httpMocks.createResponse();
        (0, routes_1.delete_poll)(req6, res6);
        assert.strictEqual(res6._getStatusCode(), 400);
        assert.deepStrictEqual(res6._getData(), 'required argument "name" was missing or invaild');
        var req7 = httpMocks.createRequest({ method: 'POST', url: '/api/delete', body: { name: 'test0' } });
        var res7 = httpMocks.createResponse();
        (0, routes_1.delete_poll)(req7, res7);
        assert.strictEqual(res7._getStatusCode(), 200);
        assert.deepStrictEqual(res7._getData().delete, true);
        var req8 = httpMocks.createRequest({ method: 'GET', url: '/api/list', query: {} });
        var res8 = httpMocks.createResponse();
        (0, routes_1.listPolls)(req8, res8);
        assert.strictEqual(res8._getStatusCode(), 200);
        assert.deepStrictEqual(res8._getData().openPolls.length, 2);
        assert.deepStrictEqual(res8._getData().closedPolls.length, 0);
        assert.deepStrictEqual(res8._getData().openPolls[0].name, 'test2');
        assert.deepStrictEqual(res8._getData().openPolls[1].name, 'test1');
        // Push time forward by 10 minutes
        (0, routes_1.advanceTimeForTesting)(10 * 60 * 1000);
        var req9 = httpMocks.createRequest({ method: 'POST', url: '/api/delete', body: { name: 'test1' } });
        var res9 = httpMocks.createResponse();
        (0, routes_1.delete_poll)(req9, res9);
        assert.strictEqual(res9._getStatusCode(), 200);
        assert.deepStrictEqual(res9._getData().delete, true);
        var req10 = httpMocks.createRequest({ method: 'GET', url: '/api/list', query: {} });
        var res10 = httpMocks.createResponse();
        (0, routes_1.listPolls)(req10, res10);
        assert.strictEqual(res10._getStatusCode(), 200);
        assert.deepStrictEqual(res10._getData().openPolls.length, 0);
        assert.deepStrictEqual(res10._getData().closedPolls.length, 1);
        assert.deepStrictEqual(res10._getData().closedPolls[0].name, 'test2');
        (0, routes_1.resetForTesting)();
    });
});
//# sourceMappingURL=data:application/json;base64,